
disabled = true;

id = "fmi::forecast::ecmwf::uv::point::timevaluepair";

constructor_name = "wfs_forecast_handler_factory";

title:
{
	eng = "ECMWF UV Point Weather Forecast";
	fin = "ECMWF UV piste-ennuste";
};

abstract:
{
	eng = "ECMWF weather forecast daily maximum UV parameter fetched to a specific location returned in timevaluepair format. Location need to be specified as place or geoid query parameters.";
	fin = "ECMWF sääennusteen päivän UV maksimi parametri haettuna pisteeseen palautettuna 'timevaluepair'-muodossa. Paikka tulee määrittää joko paikannimenä (place) tai geoid:nä (geoid).";
};

template = "weather_forecast_timevaluepair.c2t";

parameters:
(
{
	name = "starttime";
	title = {eng = "Begin of the time interval"; fin = "Alkuaika"; };
	abstract = { eng = "Parameter begin specifies the begin of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson alkuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},

{
	name = "endtime";
	title = { eng = "End of time interval"; fin = "Loppuaika"; };
	abstract = { eng = "End of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson loppuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "timestep";
	title = { eng = "The time step of data in minutes"; fin= "Aika-askel minuutteina";};
	abstract = { eng = "The time step of data in minutes. Notice that timestep is calculated from start of the ongoing hour or day. "; fin= "Aika-askel minuutteina. Huomaa, että aika-askel lasketaan tasaminuuteille edellisestä tasatunnista tai vuorokaudesta.";};
	xmlType = "int";
	type = "uint";
},
{
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; fin = "Projektio"; };
        abstract = { eng = "Coordinate projection to use in results. For example EPSG::3067"; fin = "Projektiotieto. Esimerkiksi EPSG::3067";};
        xmlType = "xsi:string";
        type = "string";
},
{
        name = "place";
        title = { eng = "The location for which to provide data"; fin = "Paikannimi"; };
        abstract = { eng = "The location for which to provide forecast. Region can be given after location name separated by comma (for example Kumpula,Kolari)."; fin = "Paikannimi. Alueen voi antaa paikannimen jälkeen pilkulla erotettuna (esim. Kumpula,Kolari)."; };
        xmlType = "xsi:string";
        type = "string";
        minOccurs = 0;
        maxOccurs = 99;
},
{
        name = "geoid";
        title = { eng = "Geoid of the location for which to return data."; fin = "Haettavan paikan geoid."; };
        abstract = { eng = "Geoid of the location for which to return data. (ID from geonames.org)"; fin = "Haettavan paikan geoid (geonames.org:sta)"; };
        xmlType = "int";
        type = "int";
	minOccurs = 0;
	maxOccurs = 99;
},
{
	name = "latlon";
	title = { eng = "Location coordinates to return data."; fin = "Paikan koordinaatit";  };
	abstract = { eng = "Location coordinates to return data  (lat,lon). For example 61.2,21"; fin = "Paikan koordinaatit (lat,lon). Esimerkiksi 61.2,21"; };
	xmlType = "gml:pos";
	type = "double[2]";
	minOccurs = 0;
	maxOccurs = 99;
},
{
        name     = "timezone";
        title    = { eng = "Time zone"; fin = "Aikavyöhyke"; };
        abstract = { eng = "Time zone of the time instant of the data point in the form Area/Location (for example America/Costa_Rica). Default value is UTC.";
                     fin = "Datapisteen aika-arvon aikavyöhyke muodossa Alue/Paikka (esim. Europe/Stockholm). Oletusvyöhyke on UTC."; };
        xmlType  = "xsi:string";
        type     = "string";
}

);

returnTypeNames = [ "omso:PointTimeSeriesObservation" ];

handler_params:
{
hours = [];
times = [];
timeSteps = "${}";
beginTime = "${starttime: now}";
endTime = "${endtime: after 96 hours}";
timeStep = "${timestep: 0}";
model = ["ecmwf_maailma_uv"];
level = [];
levelType = "";
levelHeights = [];
param = ["UVMaximum", "UVCumulated"];
maxDistance = 50000.0;
places = ["${place}"];
latlons = ["${latlon}"];
geoids = ["${geoid}"];
keyword_overwritable = false;
	keyword = "";
findNearestValid = 0;
precision = 2;
locale = "fi_FI.utf8";
missingText = "NaN";
originTime = "${}";
startStep="${}";
crs = "${crs:EPSG::4258}";
separateGroups = 0;
timeZone = "UTC";


};

separateGroups = true;


