
disabled = false;

id = "fmi::forecast::ecmwf::winterweather::freezingdrizzleprecipitation";

expiresSeconds = 21600;

constructor_name = "wfs_winterweather_probabilities_query_handler_factory";

title:
{
	eng = "Freezing Drizzle Probability";
	fin = "Jäätävän tihkun todennäköisyys";
};

abstract:
{
	eng = "Probability of Freezing Drizzle in IWXXM format for 0-5 days.";
	fin = "Todennäköisyysennuste jäätävälle tihkusateelle IWXXM-formaatissa seuraavalle 0-5 päivälle."
};

template = "winter_weather_probabilities.c2t";

parameters:
(
{
	name = "starttime";
	title = {eng = "Begin of the time interval"; fin = "Alkuaika"; };
	abstract = { eng = "Parameter begin specifies the begin of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson alkuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "origintime";
	title = {eng = "Analysis time"; fin = "Analyysiaika"; };
	abstract = { eng = "Analysis time specifies the time of analysis in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Analyysiaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "endtime";
	title = { eng = "End of time interval"; fin = "Loppuaika"; };
	abstract = { eng = "End of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson loppuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "timestep";
	title = { eng = "The time step of data in minutes"; fin= "Aika-askel minuutteina";};
	abstract = { eng = "The time step of data in minutes. Notice that timestep is calculated from start of the ongoing hour or day. "; fin= "Aika-askel minuutteina. Huomaa, että aika-askel lasketaan tasaminuuteille edellisestä tasatunnista tai vuorokaudesta.";};
	xmlType = "int";
	type = "uint";
},
{
	name = "timesteps";
	title = { eng = "Number of timesteps"; fin= "Aika-askelten lukumäärä";};
	abstract = { eng = "Number of timesteps in result set."; fin= "Tulosjoukossa palautettavien aika-askelten lukumäärä.";};
	xmlType = "int";
	type = "uint";
},
{
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; fin = "Projektio"; };
        abstract = { eng = "Coordinate projection to use in results. For example EPSG::3067"; fin = "Projektiotieto. Esimerkiksi EPSG::3067";};
        xmlType = "xsi:string";
        type = "string";
},
{
        name = "keyword";
        title = { eng = "Keyword for set of airports"; fin = "Avainsana, jolla saadaan määrätty joukko lentokenttiä"; };
        abstract = { eng = "Keyword for airports. For example 'finavia'"; fin = "Avainsana lentokentille. Esimerkiskis 'finavia'";};
        xmlType = "xsi:string";
        type = "string";
	minOccurs = 0;
    	maxOccurs = 1;
},
{
	name = "bbox";
	title = { eng = "Bounding box of area for which to return data."; fin = "Aluerajaus";  };
	abstract = { eng = "Bounding box of area for which to return data (lon,lat,lon,lat). For example 21,61,22,62"; fin = "Aluerajaus (lon,lat,lon,lat). Esimerkiksi 21,61,22,62"; };
	xmlType = "xsi:string";
	type = "bbox";
	minOccurs = 0;
	maxOccurs = 1;
},
{
        name = "place";
        title = { eng = "The location for which to provide data"; fin = "Paikannimi"; };
        abstract = { eng = "The location for which to provide forecast. Region can be given after location name separated by comma (for example Kumpula,Kolari)."; fin = "Paikannimi. Alueen voi antaa paikannimen jälkeen pilkulla erotettuna (esim. Kumpula,Kolari)."; };
        xmlType = "xsi:string";
        type = "string";
        minOccurs = 0;
        maxOccurs = 99;
},
{
        name = "geoid";
        title = { eng = "Geoid of the location for which to return data."; fin = "Haettavan paikan geoid."; };
        abstract = { eng = "Geoid of the location for which to return data. (ID from geonames.org)"; fin = "Haettavan paikan geoid (geonames.org:sta)"; };
        xmlType = "int";
        type = "int";
	minOccurs = 0;
	maxOccurs = 99;
},
{
	name = "latlon";
	title = { eng = "Location coordinates to return data."; fin = "Paikan koordinaatit";  };
	abstract = { eng = "Location coordinates to return data  (lat,lon). For example 61.2,21"; fin = "Paikan koordinaatit (lat,lon). Esimerkiksi 61.2,21"; };
	xmlType = "gml:pos";
	type = "double[2]";
	minOccurs = 0;
	maxOccurs = 99;
},
{
        name     = "timezone";
        title    = { eng = "Time zone"; fin = "Aikavyöhyke"; };
        abstract = { eng = "Time zone of the time instant of the data point in the form Area/Location (for example America/Costa_Rica). Default value is UTC.";
                     fin = "Datapisteen aika-arvon aikavyöhyke muodossa Alue/Paikka (esim. Europe/Stockholm). Oletusvyöhyke on UTC."; };
        xmlType  = "xsi:string";
        type     = "string";
},
{
    name     = "producer";
    title    = {   eng: "Producer"; 
                   fin: "Tuottaja";    };
    abstract = {   eng: "Model or process which provides the data."; 
                   fin: "Datan tuottava malli tai prosessi.";    };
    xmlType  = "xsi:string";
    type     = "string";
    minOccurs = 0;
    maxOccurs = 1;
},
{
        name = "icaocode";
        title = { eng = "ICAO Code"; fin = "ICAO tunnus"; };
        abstract = {  eng = "Four-character alphanumeric code designating each airport around the world. (for example EFHK)."; fin = "Lentopaikalle määrittävä neljäkirjaiminen kansainvälinen tunnus (esim. EFHK)."; };
        xmlType = "xsi:string";
        type = "string";
        minOccurs = 0;
        maxOccurs = 99;
}
);

returnTypeNames = ["wp:FreezingDrizzlePrecipitation"];

handler_params:
{
	icaoCode = ["${icaocode}"];
	hours = [];
        times = [];
        timeSteps = "${timesteps}";
        beginTime = "${starttime: now}";
        endTime = "${endtime: after 120 hours}";
        timeStep = "${timestep:180}";
	producer = "${producer:wwi}";
        maxDistance = 50000.0;
	places = ["${place}"];
	latlons = [];
	geoids = [];
	keyword_overwritable = false;
        keyword = "${keyword:toplink}";
        findNearestValid = 0;
        boundingBox = "${bbox:-180,-90,180,90,EPSG::4326}";
        originTime = "${origintime}";
        locale = "fi_FI.utf8";
        missingText = "NaN";
        startStep="${}";
        crs = "${crs:EPSG::4326}";
        timeZone = "${timezone:UTC}";
};

probability_params:
{
        param_id = ["freezing_drizzle"];

	probabilityUnit = "percent";
	precipitationIntensityLight = "LIGHT";
	precipitationIntensityModerate = "MODERATE";
	precipitationIntensityHeavy = "HEAVY";


 	freezing_drizzle:
        {
	 precipitationType = "FreezingDrizzle";
	 idLight = 1223;
	 idModerate = 1223;
	 idHeavy = 1223;
	};
};

