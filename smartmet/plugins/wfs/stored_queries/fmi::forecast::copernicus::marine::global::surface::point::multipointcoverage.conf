
disabled = true;

id = "fmi::forecast::copernicus::marine::global::surface::point::multipointcoverage";

expiresSeconds = 21600;

constructor_name = "wfs_forecast_handler_factory";

title:
{
	eng = "Copernicus Marine Global Point Weather Forecast";
	fin = "Copernicus globaali meriennuste pisteeseen";
};

abstract:
{
	eng = "Copernicus sea forecast fetched to a specific location returned in multi point coverage format. Location needs to be specified with the latlon query parameter.";
	fin = "Copernicus-meriennuste haettuna pisteeseen palautettuna multi point coverage -muodossa. Paikka tulee määrittää koordinaattiparina (latlon).";
};

template = "weather_forecast_grid.c2t";

parameters:
(
{
	name = "starttime";
	title = {eng = "Begin of the time interval"; fin = "Alkuaika"; };
	abstract = { eng = "Parameter begin specifies the begin of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson alkuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "endtime";
	title = { eng = "End of time interval"; fin = "Loppuaika"; };
	abstract = { eng = "End of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson loppuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
        name = "timestep";
        title = { eng = "The time step of data in minutes"; fin= "Aika-askel minuutteina";};
        abstract = { eng = "The time step of data in minutes. Notice that timestep is calculated from start of the ongoing hour or day. "; fin= "Aika-askel minuutteina. Huomaa, että aika-askel lasketaan tasaminuuteille edellisestä tasatunnista tai vuorokaudesta.";};
        xmlType = "int";
        type = "uint";
},
{
	name = "parameters";
	title = { eng = "Parameters to return"; fin = "Meteorologiset parametrit"; };
	abstract = { eng = "Comma separated list of meteorological parameters to return."; fin = "Meteorologiset parametrit pilkulla erotettuna.";};
	xmlType = "NameList";
	type = "string[1..99]";
	minOccurs = 0;
	maxOccurs = 999;
},
{
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; fin = "Projektio"; };
        abstract = { eng = "Coordinate projection to use in results. For example EPSG::3067"; fin = "Projektiotieto. Esimerkiksi EPSG::3067";};
        xmlType = "xsi:string";
        type = "string";
},
{
	name = "latlon";
	title = { eng = "Location coordinates to return data."; fin = "Paikan koordinaatit";  };
	abstract = { eng = "Location coordinates to return data  (lat,lont). For example 61.2,21"; fin = "Paikan koordinaatit (lat,lon). Esimerkiksi 61.2,21"; };
	xmlType = "gml:pos";
	type = "double[2]";
	minOccurs = 0;
	maxOccurs = 99;
},
{
        name     = "timezone";
        title    = { eng = "Time zone"; fin = "Aikavyöhyke"; };
        abstract = { eng = "Time zone of the time instant of the data point in the form Area/Location (for example America/Costa_Rica). Default value is UTC.";
                     fin = "Datapisteen aika-arvon aikavyöhyke muodossa Alue/Paikka (esim. Europe/Stockholm). Oletusvyöhyke on UTC."; };
        xmlType  = "xsi:string";
        type     = "string";
}
);

returnTypeNames = [ "omso:GridSeriesObservation" ];

handler_params:
{
        hours = [];
        times = [];
        timeStep = "${timestep:60}";
	timeSteps = "${}";
        beginTime = "${starttime: now}";
        endTime = "${endtime: after 168 hours}";
        model = ["copernicus_marine_global_surface"];
        level = [];
        levelType = "";
        levelHeights = [];
        param = ["${parameters > defaultParam}"];
        maxDistance = 50000.0;
        places = [];
        latlons = ["${latlon}"];
        geoids = [];
        keyword_overwritable = false;
        keyword = "";
        findNearestValid = 0;
        locale = "fi_FI.utf8";
        missingText = "NaN";
        originTime = "${}";
        startStep="${}";
        crs = "${crs:EPSG::4326}";
        timeZone = "${timezone: UTC}";
};

named_params = (
    {
        name = "defaultParam";
        def = ["TemperatureSea","CurrentSpeed","CurrentDirection","SeaLevel"];
    }

);

separateGroups = true;

